<?xml version="1.0"?>
<doc>
<assembly>
<name>
eZAPI
</name>
</assembly>
<members>
<member name="M:eZstd.eZAPI.APIDll.SetDllDirectoryW(System.String@)">
 <summary>
 将指定的文件夹添加到此程序的DLL文件的搜索路径中.
 adds a directory to the search path used to locate DLLs for the application.
 </summary>
 <param name="lpPathName">要添加的文件夹路径</param>
 <remarks>Pretty straight-forward to use. Obviously, is usually going to be called before calling LoadLibraryEx().
 另外,在PInvoke中,只有SetDllDirectory这个函数,但是它的真实的名称是SetDllDirectoryW.</remarks>
</member>
<member name="M:eZstd.eZAPI.APIDll.LoadLibraryEx(System.String,System.IntPtr,eZstd.eZAPI.LoadLibraryFlags)">
 <summary>
 装载指定的动态链接库，并为当前进程把它映射到地址空间。一旦载入，就可以访问库内保存的资源。一旦不需要，用FreeLibrary函数释放DLL
 </summary>
 <param name="lpFileName">指定要载入的动态链接库的名称。采用与CreateProcess函数的lpCommandLine参数指定的同样的搜索顺序</param>
 <param name="hReservedNull">未用，设为零</param>
 <param name="dwFlags"></param>
 <returns>成功则返回库模块的句柄，零表示失败。会设置GetLastError</returns>
 <remarks>参考 http://www.pinvoke.net/default.aspx/kernel32/LoadLibraryEx.html .
 If you only want to load resources from the library, specify LoadLibraryFlags.LoadLibraryAsDatafile as dwFlags. 
 In this case, nothing is done to execute or prepare to execute the mapped file.</remarks>
</member>
<member name="T:eZstd.eZAPI.WindowsMessages">
 <summary>
 响应窗口的消息
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ACTIVATE">
 <summary>
The WM_ACTIVATE message is sent when a window is being activated or deactivated. This message is sent first to the window procedure of the top-level window being deactivated; it is then sent to the window procedure of the top-level window being activated.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ACTIVATEAPP">
 <summary>
The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_AFXFIRST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_AFXLAST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_APP">
 <summary>
The WM_APP constant is used by applications to help define private messages usually of the form WM_APP+X where X is an integer value.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ASKCBFORMATNAME">
 <summary>
The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CANCELJOURNAL">
 <summary>
The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CANCELMODE">
 <summary>
The WM_CANCELMODE message is sent to cancel certain modes such as mouse capture. For example the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example the EnableWindow function sends this message when disabling the specified window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CAPTURECHANGED">
 <summary>
The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CHANGECBCHAIN">
 <summary>
The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CHANGEUISTATE">
 <summary>
An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CHAR">
 <summary>
The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CHARTOITEM">
 <summary>
Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CHILDACTIVATE">
 <summary>
The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated moved or sized.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CLEAR">
 <summary>
An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection if any from the edit control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CLOSE">
 <summary>
The WM_CLOSE message is sent as a signal that a window or an application should terminate.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_COMMAND">
 <summary>
The WM_COMMAND message is sent when the user selects a command item from a menu when a control sends a notification message to its parent window or when an accelerator keystroke is translated.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_COMPACTING">
 <summary>
The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_COMPAREITEM">
 <summary>
The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CONTEXTMENU">
 <summary>
The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_COPY">
 <summary>
An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_COPYDATA">
 <summary>
An application sends the WM_COPYDATA message to pass data to another application.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CREATE">
 <summary>
The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created but before the window becomes visible.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLORBTN">
 <summary>
The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However only owner-drawn buttons respond to the parent window processing this message.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLORDLG">
 <summary>
The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message the dialog box can set its text and background colors using the specified display device context handle.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLOREDIT">
 <summary>
An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message the parent window can use the specified device context handle to set the text and background colors of the edit control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLORLISTBOX">
 <summary>
Sent to the parent window of a list box before the system draws the list box. By responding to this message the parent window can set the text and background colors of the list box by using the specified display device context handle.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLORMSGBOX">
 <summary>
The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message the owner window can set the text and background colors of the message box by using the given display device context handle.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLORSCROLLBAR">
 <summary>
The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message the parent window can use the display context handle to set the background color of the scroll bar control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CTLCOLORSTATIC">
 <summary>
A static control or an edit control that is read-only or disabled sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message the parent window can use the specified device context handle to set the text and background colors of the static control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_CUT">
 <summary>
An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection if any in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DEADCHAR">
 <summary>
The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character such as the umlaut (double-dot) that is combined with another character to form a composite character. For example the umlaut-O character (?) is generated by typing the dead key for the umlaut character and then typing the O key.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DELETEITEM">
 <summary>
Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING LB_RESETCONTENT CB_DELETESTRING or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DESTROY">
 <summary>
The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message it can be assumed that all child windows still exist.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DESTROYCLIPBOARD">
 <summary>
The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DEVICECHANGE">
 <summary>
Notifies an application of a change to the hardware configuration of a device or the computer.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DEVMODECHANGE">
 <summary>
The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DISPLAYCHANGE">
 <summary>
The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DRAWCLIPBOARD">
 <summary>
The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DRAWITEM">
 <summary>
The WM_DRAWITEM message is sent to the parent window of an owner-drawn button combo box list box or menu when a visual aspect of the button combo box list box or menu has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_DROPFILES">
 <summary>
Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ENABLE">
 <summary>
The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns but after the enabled state (WS_DISABLED style bit) of the window has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ENDSESSION">
 <summary>
The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ENTERIDLE">
 <summary>
The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ENTERMENULOOP">
 <summary>
The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ENTERSIZEMOVE">
 <summary>
The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ERASEBKGND">
 <summary>
The WM_ERASEBKGND message is sent when the window background must be erased (for example when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_EXITMENULOOP">
 <summary>
The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_EXITSIZEMOVE">
 <summary>
The WM_EXITSIZEMOVE message is sent one time to a window after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_FONTCHANGE">
 <summary>
An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETDLGCODE">
 <summary>
The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETFONT">
 <summary>
An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETHOTKEY">
 <summary>
An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETICON">
 <summary>
The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog and the small icon in the window caption.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETMINMAXINFO">
 <summary>
The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position or its default minimum or maximum tracking size.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETOBJECT">
 <summary>
Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint AccessibleObjectFromEvent or AccessibleObjectFromWindow. However server applications handle this message.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETTEXT">
 <summary>
An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_GETTEXTLENGTH">
 <summary>
An application sends a WM_GETTEXTLENGTH message to determine the length in characters of the text associated with a window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_HANDHELDFIRST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_HANDHELDLAST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_HELP">
 <summary>
Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed WM_HELP is sent to the window associated with the menu; otherwise WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus WM_HELP is sent to the currently active window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_HOTKEY">
 <summary>
The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_HSCROLL">
 <summary>
This message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_HSCROLLCLIPBOARD">
 <summary>
The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_ICONERASEBKGND">
 <summary>
Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_CHAR">
 <summary>
Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_COMPOSITION">
 <summary>
Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_COMPOSITIONFULL">
 <summary>
Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_CONTROL">
 <summary>
Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message the application calls the SendMessage function with the following parameters.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_ENDCOMPOSITION">
 <summary>
Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_KEYDOWN">
 <summary>
Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_KEYLAST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_KEYUP">
 <summary>
Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_NOTIFY">
 <summary>
Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_REQUEST">
 <summary>
Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_SELECT">
 <summary>
Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_SETCONTEXT">
 <summary>
Sent to an application when a window is activated. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_IME_STARTCOMPOSITION">
 <summary>
Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_INITDIALOG">
 <summary>
The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_INITMENU">
 <summary>
The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_INITMENUPOPUP">
 <summary>
The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed without changing the entire menu.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_INPUTLANGCHANGE">
 <summary>
The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows and so on.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_INPUTLANGCHANGEREQUEST">
 <summary>
The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_KEYDOWN">
 <summary>
The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_KEYFIRST">
 <summary>
This message filters for keyboard messages.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_KEYLAST">
 <summary>
This message filters for keyboard messages.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_KEYUP">
 <summary>
The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed or a keyboard key that is pressed when a window has the keyboard focus.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_KILLFOCUS">
 <summary>
The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_LBUTTONDBLCLK">
 <summary>
The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_LBUTTONDOWN">
 <summary>
The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_LBUTTONUP">
 <summary>
The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MBUTTONDBLCLK">
 <summary>
The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MBUTTONDOWN">
 <summary>
The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MBUTTONUP">
 <summary>
The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIACTIVATE">
 <summary>
An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDICASCADE">
 <summary>
An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDICREATE">
 <summary>
An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIDESTROY">
 <summary>
An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIGETACTIVE">
 <summary>
An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIICONARRANGE">
 <summary>
An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIMAXIMIZE">
 <summary>
An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDINEXT">
 <summary>
An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIREFRESHMENU">
 <summary>
An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDIRESTORE">
 <summary>
An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDISETMENU">
 <summary>
An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window to replace the window menu of the frame window or both.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MDITILE">
 <summary>
An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MEASUREITEM">
 <summary>
The WM_MEASUREITEM message is sent to the owner window of a combo box list box list view control or menu item when the control or menu is created.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MENUCHAR">
 <summary>
The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MENUCOMMAND">
 <summary>
The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MENUDRAG">
 <summary>
The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MENUGETOBJECT">
 <summary>
The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MENURBUTTONUP">
 <summary>
The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MENUSELECT">
 <summary>
The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSEACTIVATE">
 <summary>
The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSEFIRST">
 <summary>
Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSEHOVER">
 <summary>
The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSELAST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSELEAVE">
 <summary>
The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSEMOVE">
 <summary>
The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured the message is posted to the window that contains the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSEWHEEL">
 <summary>
The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOUSEHWHEEL">
 <summary>
The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOVE">
 <summary>
The WM_MOVE message is sent after a window has been moved.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_MOVING">
 <summary>
The WM_MOVING message is sent to a window that the user is moving. By processing this message an application can monitor the position of the drag rectangle and if needed change its position.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCACTIVATE">
 <summary>
Non Client Area Activated Caption(Title) of the Form
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCCALCSIZE">
 <summary>
The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message an application can control the content of the window's client area when the size or position of the window changes.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCCREATE">
 <summary>
The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCDESTROY">
 <summary>
The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCHITTEST">
 <summary>
The WM_NCHITTEST message is sent to a window when the cursor moves or when a mouse button is pressed or released. If the mouse is not captured the message is sent to the window beneath the cursor. Otherwise the message is sent to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCLBUTTONDBLCLK">
 <summary>
The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCLBUTTONDOWN">
 <summary>
The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCLBUTTONUP">
 <summary>
The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCMBUTTONDBLCLK">
 <summary>
The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCMBUTTONDOWN">
 <summary>
The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCMBUTTONUP">
 <summary>
The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCMOUSELEAVE">
 <summary>
 The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCMOUSEMOVE">
 <summary>
The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCPAINT">
 <summary>
The WM_NCPAINT message is sent to a window when its frame must be painted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCRBUTTONDBLCLK">
 <summary>
The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCRBUTTONDOWN">
 <summary>
The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NCRBUTTONUP">
 <summary>
The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse this message is not posted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NEXTDLGCTL">
 <summary>
The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NEXTMENU">
 <summary>
The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NOTIFY">
 <summary>
Sent by a common control to its parent window when an event has occurred or the control requires some information.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NOTIFYFORMAT">
 <summary>
Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_NULL">
 <summary>
The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PAINT">
 <summary>
Occurs when the control needs repainting
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PAINTCLIPBOARD">
 <summary>
The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PAINTICON">
 <summary>
Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows except in unusual circumstances explained in the Remarks.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PALETTECHANGED">
 <summary>
This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PALETTEISCHANGING">
 <summary>
The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PARENTNOTIFY">
 <summary>
The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed the system sends the message before any processing to destroy the window takes place.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PASTE">
 <summary>
An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PENWINFIRST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PENWINLAST">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_POWER">
 <summary>
Notifies applications that the system typically a battery-powered personal computer is about to enter a suspended mode. Obsolete : use POWERBROADCAST instead
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_POWERBROADCAST">
 <summary>
Notifies applications that a power-management event has occurred.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PRINT">
 <summary>
The WM_PRINT message is sent to a window to request that it draw itself in the specified device context most commonly in a printer device context.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_PRINTCLIENT">
 <summary>
The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context most commonly in a printer device context.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_QUERYDRAGICON">
 <summary>
The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_QUERYENDSESSION">
 <summary>
The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero. After processing this message the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_QUERYNEWPALETTE">
 <summary>
This message informs a window that it is about to receive the keyboard focus giving the window the opportunity to realize its logical palette when it receives the focus.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_QUERYOPEN">
 <summary>
The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_QUEUESYNC">
 <summary>
The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_QUIT">
 <summary>
Once received it ends the application's Message Loop signaling the application to end. It can be sent by pressing Alt+F4 Clicking the X in the upper right-hand of the program or going to File->Exit.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_RBUTTONDBLCLK">
 <summary>
he WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_RBUTTONDOWN">
 <summary>
The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_RBUTTONUP">
 <summary>
The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured the message is posted to the window beneath the cursor. Otherwise the message is posted to the window that has captured the mouse.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_RENDERALLFORMATS">
 <summary>
The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications the clipboard owner must render data in all the formats it is capable of generating and place the data on the clipboard by calling the SetClipboardData function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_RENDERFORMAT">
 <summary>
The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETCURSOR">
 <summary>
The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETFOCUS">
 <summary>
When the controll got the focus
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETFONT">
 <summary>
An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETHOTKEY">
 <summary>
An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key the system activates the window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETICON">
 <summary>
An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box and the small icon in the window caption.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETREDRAW">
 <summary>
An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETTEXT">
 <summary>
Text / Caption changed on the control. An application sends a WM_SETTEXT message to set the text of a window.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SETTINGCHANGE">
 <summary>
An application sends the WM_SETTINGCHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SHOWWINDOW">
 <summary>
The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SIZE">
 <summary>
The WM_SIZE message is sent to a window after its size has changed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SIZECLIPBOARD">
 <summary>
The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SIZING">
 <summary>
The WM_SIZING message is sent to a window that the user is resizing. By processing this message an application can monitor the size and position of the drag rectangle and if needed change its size or position.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SPOOLERSTATUS">
 <summary>
The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_STYLECHANGED">
 <summary>
The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_STYLECHANGING">
 <summary>
The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYNCPAINT">
 <summary>
The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYSCHAR">
 <summary>
The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is a character key that is pressed while the ALT key is down.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYSCOLORCHANGE">
 <summary>
This message is sent to all top-level windows when a change is made to a system color setting.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYSCOMMAND">
 <summary>
A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button minimize button restore button or close button.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYSDEADCHAR">
 <summary>
The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is a dead key that is pressed while holding down the ALT key.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYSKEYDOWN">
 <summary>
The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_SYSKEYUP">
 <summary>
The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_TCARD">
 <summary>
Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_TIMECHANGE">
 <summary>
A message that is sent whenever there is a change in the system time.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_TIMER">
 <summary>
The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_UNDO">
 <summary>
An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control the previously deleted text is restored or the previously added text is deleted.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_UNINITMENUPOPUP">
 <summary>
The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_USER">
 <summary>
The WM_USER constant is used by applications to help define private messages for use by private window classes usually of the form WM_USER+X where X is an integer value.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_USERCHANGED">
 <summary>
The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off the system updates the user-specific settings. The system sends this message immediately after updating the settings.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_VKEYTOITEM">
 <summary>
Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_VSCROLL">
 <summary>
The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_VSCROLLCLIPBOARD">
 <summary>
The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_WINDOWPOSCHANGED">
 <summary>
The WM_WINDOWPOSCHANGED message is sent to a window whose size position or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_WINDOWPOSCHANGING">
 <summary>
The WM_WINDOWPOSCHANGING message is sent to a window whose size position or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_WININICHANGE">
 <summary>
An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI. Note The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_XBUTTONDBLCLK">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_XBUTTONDOWN">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowsMessages.WM_XBUTTONUP">
 <summary>
Definition Needed
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.SysCommands">
 <summary>
 System command values used in the WM_SYSCOMMAND notification.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_SIZE">
<summary>Sizes the window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_MOVE">
<summary>Moves the window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_MINIMIZE">
<summary>Minimizes the window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_MAXIMIZE">
<summary>Maximizes the window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_NEXTWINDOW">
<summary>Moves to the next window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_PREVWINDOW">
<summary>Moves to the previous window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_CLOSE">
<summary>Closes the window.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_VSCROLL">
<summary>Scrolls vertically.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_HSCROLL">
<summary>Scrolls horizontally.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_MOUSEMENU">
<summary>Retrieves the window menu as a result of a mouse click.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_KEYMENU">
<summary>
Retrieves the window menu as a result of a keystroke.
For more information, see the Remarks section.
</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_ARRANGE">
<summary>TODO</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_RESTORE">
<summary>Restores the window to its normal position and size.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_TASKLIST">
<summary>Activates the Start menu.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_SCREENSAVE">
<summary>Executes the screen saver application specified in the [boot] section of the System.ini file.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_HOTKEY">
<summary>
Activates the window associated with the application-specified hot key.
The lParam parameter identifies the window to activate.
</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_DEFAULT">
<summary>Selects the default item; the user double-clicked the window menu.</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_MONITORPOWER">
<summary>
Sets the state of the display. This command supports devices that
have power-saving features, such as a battery-powered personal computer.
The lParam parameter can have the following values: -1 = the display is powering on,
1 = the display is going to low power, 2 = the display is being shut off
</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_CONTEXTHELP">
<summary>
Changes the cursor to a question mark with a pointer. If the user
then clicks a control in the dialog box, the control receives a WM_HELP message.
</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SC_SEPARATOR">
<summary>TODO</summary>
</member>
<member name="F:eZstd.eZAPI.SysCommands.SCF_ISSECURE">
<summary>Indicates whether the screen saver is secure.</summary>
</member>
<member name="F:eZstd.eZAPI.PeekMessageParams.PM_NOREMOVE">
 <summary>
 经过PeekMessage处理后，消息依然留在队列中
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.PeekMessageParams.PM_REMOVE">
 <summary>
 经过PeekMessage处理后，消息被从队列中删除
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.SWP_HWND">
 <summary>
 传递给SetWindowPos函数
 参考： http://www.pinvoke.net/default.aspx/Constants/HWND.html
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_BOTTOM">
 <summary>
 将窗口置于窗口列表底部 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_BROADCAST">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_DESKTOP">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_MESSAGE">
 <summary>
 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_NOTOPMOST">
 <summary>
 将窗口置于列表顶部，并位于任何最顶部窗口的后面 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_TOP">
 <summary>
 将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SWP_HWND.HWND_TOPMOST">
 <summary>
 窗体置于屏幕最顶端，可以缩小移动，而且不会被其他窗口覆盖。但是用户可以编辑后面窗口。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.SynchronousWindowPosition">
 <summary>If the calling thread and the thread that owns the window are attached to different input queues, 
 the system posts the request to the thread that owns the window. This prevents the calling thread from 
 blocking its execution while other threads process the request.</summary>
 <remarks>SWP_ASYNCWINDOWPOS</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DeferErase">
 <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
 <remarks>SWP_DEFERERASE</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DrawFrame">
 <summary>Draws a frame (defined in the window's class description) around the window.</summary>
 <remarks>SWP_DRAWFRAME</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.FrameChanged">
 <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to 
 the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE 
 is sent only when the window's size is being changed.</summary>
 <remarks>SWP_FRAMECHANGED</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.HideWindow">
 <summary>Hides the window.</summary>
 <remarks>SWP_HIDEWINDOW</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DoNotActivate">
 <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the 
 top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter 
 parameter).</summary>
 <remarks>SWP_NOACTIVATE</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DoNotCopyBits">
 <summary>Discards the entire contents of the client area. If this flag is not specified, the valid 
 contents of the client area are saved and copied back into the client area after the window is sized or 
 repositioned.</summary>
 <remarks>SWP_NOCOPYBITS</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.IgnoreMove">
 <summary>Retains the current position (ignores X and Y parameters).</summary>
 <remarks>SWP_NOMOVE</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DoNotChangeOwnerZOrder">
 <summary>Does not change the owner window's position in the Z order.</summary>
 <remarks>SWP_NOOWNERZORDER</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DoNotRedraw">
 <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
 the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent 
 window uncovered as a result of the window being moved. When this flag is set, the application must 
 explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
 <remarks>SWP_NOREDRAW</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DoNotReposition">
 <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
 <remarks>SWP_NOREPOSITION</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.DoNotSendChangingEvent">
 <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
 <remarks>SWP_NOSENDCHANGING</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.IgnoreResize">
 <summary>Retains the current size (ignores the cx and cy parameters).</summary>
 <remarks>SWP_NOSIZE</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.IgnoreZOrder">
 <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
 <remarks>SWP_NOZORDER</remarks>
</member>
<member name="F:eZstd.eZAPI.SetWindowPosFlags.ShowWindow">
 <summary>Displays the window.</summary>
 <remarks>SWP_SHOWWINDOW</remarks>
</member>
<member name="T:eZstd.eZAPI.GetWndConsts">
 <summary>
 Specifies the relationship between the specified window and the window whose handle is to be retrieved.
 </summary>
 <remarks>兄弟或同级是指在整个分级结构中位于同一级别的窗口。如某个窗口有五个子窗口，那五个窗口就是兄弟窗口。
 尽管GetWindow可用于枚举窗口，但倘若要在枚举过程中重新定位、创建和清除窗口，那么EnumWindows和EnumChildWindows更为可靠</remarks>
</member>
<member name="F:eZstd.eZAPI.GetWndConsts.GW_HWNDFIRST">
 <summary>
 为一个源子窗口寻找第一个兄弟（同级）窗口，或寻找第一个顶级窗口
 要获取的窗口与原窗口处于同一级别，但它的Z序最大。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.GetWndConsts.GW_HWNDLAST">
 <summary>
 为一个源子窗口寻找最后一个兄弟（同级）窗口，或寻找最后一个顶级窗口。
 要获取的窗口与原窗口处于同一级别，但它的Z序最小。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.GetWndConsts.GW_HWNDNEXT">
 <summary>
 为源窗口寻找下一个兄弟窗口。
 要获取的窗口与原窗口处于同一级别，并且它的Z序恰好在原窗口之上。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.GetWndConsts.GW_HWNDPREV">
 <summary>
 为源窗口寻找前一个兄弟窗口。
 要获取的窗口与原窗口处于同一级别，并且它的Z序恰好在原窗口之下。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.GetWndConsts.GW_OWNER">
 <summary>
 寻找窗口的所有者
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.GetWndConsts.GW_CHILD">
 <summary>
 寻找源窗口的第一个子窗口
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.ShowWindowCommands">
 <summary>
 Used with ShowWindow and WINDOWPLACEMENT.specifying how the window is to be shown
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.Hide">
 <summary>
 Hides the window and activates another window.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.Normal">
 <summary>
 Activates and displays a window. If the window is minimized or 
 maximized, the system restores it to its original size and position.
 An application should specify this flag when displaying the window 
 for the first time.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ShowMinimized">
 <summary>
 Activates the window and displays it as a minimized window.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.Maximize">
 <summary>
 Maximizes the specified window.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ShowMaximized">
 <summary>
 Activates the window and displays it as a maximized window.
 </summary>       
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ShowNoActivate">
 <summary>
 Displays a window in its most recent size and position. This value 
 is similar to <see cref="F:eZstd.eZAPI.ShowWindowCommands.Normal"/>, except 
 the window is not actived.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.Show">
 <summary>
 Activates the window and displays it in its current size and position. 
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.Minimize">
 <summary>
 Minimizes the specified window and activates the next top-level 
 window in the Z order.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ShowMinNoActive">
 <summary>
 Displays the window as a minimized window. This value is similar to
 <see cref="F:eZstd.eZAPI.ShowWindowCommands.ShowMinimized"/>, except the 
 window is not activated.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ShowNA">
 <summary>
 Displays the window in its current size and position. This value is 
 similar to <see cref="F:eZstd.eZAPI.ShowWindowCommands.Show"/>, except the 
 window is not activated.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.Restore">
 <summary>
 Activates and displays the window. If the window is minimized or 
 maximized, the system restores it to its original size and position. 
 An application should specify this flag when restoring a minimized window.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ShowDefault">
 <summary>
 Sets the show state based on the SW_* value specified in the 
 STARTUPINFO structure passed to the CreateProcess function by the 
 program that started the application.
 </summary>
</member>
<member name="F:eZstd.eZAPI.ShowWindowCommands.ForceMinimize">
 <summary>
  <b>Windows 2000/XP:</b> Minimizes a window, even if the thread 
 that owns the window is not responding. This flag should only be 
 used when minimizing windows from a different thread.
 </summary>
</member>
<member name="T:eZstd.eZAPI.WindowLongFlags">
 <summary>
 Flags for GetWindowLong, GetWindowLongPtr, SetWindowLong and SetWindowLongPtr
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_EXSTYLE">
 <summary>
 窗口的扩展样式 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_STYLE">
 <summary>
 窗口样式
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_WNDPROC">
 <summary>
 该窗口的窗口函数的地址，即指向窗口函数的指针。
 用GWL_WNDPROC索引调用函数<see cref="M:eZstd.eZAPI.APIWindows.SetWindowLong(System.IntPtr,eZstd.eZAPI.WindowLongFlags,System.IntPtr)"/>可以创建窗口类的一个子类。
 应用程序不要试图为其他进程创建的窗口产生子类，那样不起作用。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_HINSTANCE">
 <summary>
 拥有窗口的实例的句柄 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_HWNDPARENT">
 <summary>
 该窗口之父的句柄。不要用SetWindowWord来改变这个值。
 SetParent函数修改子窗口的父窗口。应用程序不应调用SetWindowLong函数来修改子窗口的父窗口。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_ID">
 <summary>
 对话框中一个子窗口的标识符 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.GWL_USERDATA">
 <summary>
 含义由应用程序规定。此索引可以用来存取一个保存在每一个窗口结构中的Long值。这个Long值是特意为应用程序保留的。
 通过，窗口是被另外的应用程序创建的话，那么应用程序不应该在这个窗口的Long值中存储东西。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.DWL_DLGPROC">
 <summary>
 这个窗口的对话框函数地址 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.DWL_MSGRESULT">
 <summary>
 在对话框函数中处理的一条消息返回的值 
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.WindowLongFlags.DWL_USER">
 <summary>
 含义由应用程序规定 
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.WindowStyle">
 <summary>
 Window Styles.
 The following styles can be specified wherever a window style is required. 
 After the control has been created, these styles cannot be modified, except as noted.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_BORDER">
 <summary>The window has a thin-line border.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_CAPTION">
 <summary>The window has a title bar (includes the WS_BORDER style).</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_CHILD">
 <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_CLIPCHILDREN">
 <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_CLIPSIBLINGS">
 <summary>
 Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
 If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_DISABLED">
 <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_DLGFRAME">
 <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_GROUP">
 <summary>
 The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
 The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
 You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_HSCROLL">
 <summary>The window has a horizontal scroll bar.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_MAXIMIZE">
 <summary>The window is initially maximized.</summary> 
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_MAXIMIZEBOX">
 <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_MINIMIZE">
 <summary>The window is initially minimized.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_MINIMIZEBOX">
 <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_OVERLAPPED">
 <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_OVERLAPPEDWINDOW">
 <summary>The window is an overlapped window.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_POPUP">
 <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_POPUPWINDOW">
 <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_SIZEFRAME">
 <summary>The window has a sizing border.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_SYSMENU">
 <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_TABSTOP">
 <summary>
 The window is a control that can receive the keyboard focus when the user presses the TAB key.
 Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
 You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
 For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_VISIBLE">
 <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_VSCROLL">
 <summary>The window has a vertical scroll bar.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_ACCEPTFILES">
 <summary>Specifies a window that accepts drag-drop files.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_APPWINDOW">
 <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_CLIENTEDGE">
 <summary>Specifies a window that has a border with a sunken edge.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_COMPOSITED">
 <summary>
 Specifies a window that paints all descendants in bottom-to-top painting order using double-buffering.
 This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. This style is not supported in Windows 2000.
 </summary>
 <remarks>
 With WS_EX_COMPOSITED set, all descendants of a window get bottom-to-top painting order using double-buffering.
 Bottom-to-top painting order allows a descendent window to have translucency (alpha) and transparency (color-key) effects,
 but only if the descendent window also has the WS_EX_TRANSPARENT bit set.
 Double-buffering allows the window and its descendents to be painted without flicker.
 </remarks>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_CONTEXTHELP">
 <summary>
 Specifies a window that includes a question mark in the title bar. When the user clicks the question mark,
 the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message.
 The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command.
 The Help application displays a pop-up window that typically contains help for the child window.
 WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_CONTROLPARENT">
 <summary>
 Specifies a window which contains child windows that should take part in dialog box navigation.
 If this style is specified, the dialog manager recurses into children of this window when performing navigation operations
 such as handling the TAB key, an arrow key, or a keyboard mnemonic.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_DLGMODALFRAME">
 <summary>Specifies a window that has a double border.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_LAYERED">
 <summary>
 Specifies a window that is a layered window.
 This cannot be used for child windows or if the window has a class style of either CS_OWNDC or CS_CLASSDC.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_LAYOUTRTL">
 <summary>
 Specifies a window with the horizontal origin on the right edge. Increasing horizontal values advance to the left.
 The shell language must support reading-order alignment for this to take effect.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_LEFT">
 <summary>Specifies a window that has generic left-aligned properties. This is the default.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_LEFTSCROLLBAR">
 <summary>
 Specifies a window with the vertical scroll bar (if present) to the left of the client area.
 The shell language must support reading-order alignment for this to take effect.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_LTRREADING">
 <summary>
 Specifies a window that displays text using left-to-right reading-order properties. This is the default.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_MDICHILD">
 <summary>
 Specifies a multiple-document interface (MDI) child window.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_NOACTIVATE">
 <summary>
 Specifies a top-level window created with this style does not become the foreground window when the user clicks it.
 The system does not bring this window to the foreground when the user minimizes or closes the foreground window.
 The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
 To activate the window, use the SetActiveWindow or SetForegroundWindow function.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_NOINHERITLAYOUT">
 <summary>
 Specifies a window which does not pass its window layout to its child windows.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_NOPARENTNOTIFY">
 <summary>
 Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_OVERLAPPEDWINDOW">
 <summary>Specifies an overlapped window.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_PALETTEWINDOW">
 <summary>Specifies a palette window, which is a modeless dialog box that presents an array of commands.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_RIGHT">
 <summary>
 Specifies a window that has generic "right-aligned" properties. This depends on the window class.
 The shell language must support reading-order alignment for this to take effect.
 Using the WS_EX_RIGHT style has the same effect as using the SS_RIGHT (static), ES_RIGHT (edit), and BS_RIGHT/BS_RIGHTBUTTON (button) control styles.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_RIGHTSCROLLBAR">
 <summary>Specifies a window with the vertical scroll bar (if present) to the right of the client area. This is the default.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_RTLREADING">
 <summary>
 Specifies a window that displays text using right-to-left reading-order properties.
 The shell language must support reading-order alignment for this to take effect.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_STATICEDGE">
 <summary>Specifies a window with a three-dimensional border style intended to be used for items that do not accept user input.</summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_TOOLWINDOW">
 <summary>
 Specifies a window that is intended to be used as a floating toolbar.
 A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font.
 A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB.
 If a tool window has a system menu, its icon is not displayed on the title bar.
 However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_TOPMOST">
 <summary>
 Specifies a window that should be placed above all non-topmost windows and should stay above them, even when the window is deactivated.
 To add or remove this style, use the SetWindowPos function.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_TRANSPARENT">
 <summary>
 Specifies a window that should not be painted until siblings beneath the window (that were created by the same thread) have been painted.
 The window appears transparent because the bits of underlying sibling windows have already been painted.
 To achieve transparency without these restrictions, use the SetWindowRgn function.
 </summary>
</member>
<member name="F:eZstd.eZAPI.WindowStyle.WS_EX_WINDOWEDGE">
 <summary>Specifies a window that has a border with a raised edge.</summary>
</member>
<member name="T:eZstd.eZAPI.RedrawWindowFlags">
 <summary>
 Used with the RedrawWindow function.
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.Invalidate">
 <summary>
 Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
 You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
 禁用（屏蔽）重画区域。把矩形或区域加入窗口的无效区。
 </summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.InternalPaint">
 <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.
 即使窗口并非无效，也向其投递一条WM_PAINT消息
</summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.Erase">
 <summary>
 Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
 Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
 重画前，先清除重画区域的背景。也必须指定RDW_INVALIDATE。
 重画操作包括了所有的子窗口
 </summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.Validate">
 <summary>
 Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
 You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
 This value does not affect internal WM_PAINT messages.
 检验重画区域。把矩形或区域从窗口的更新区域中删除。
 </summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.NoInternalPaint">
 <summary>
 禁止内部生成或由这个函数生成的任何待决WM_PAINT消息。针对无效区域，仍会生成WM_PAINT消息
 </summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.NoErase">
 <summary>Suppresses any pending WM_ERASEBKGND messages.
 禁止删除重画区域的背景。重画操作不包括子窗口。
</summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.NoChildren">
 <summary>Excludes child windows, if any, from the repainting operation.
 重画操作排除子窗口（前提是它们存在于重画区域）
</summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.AllChildren">
 <summary>Includes child windows, if any, in the repainting operation.
 重画操作包括子窗口（前提是它们存在于重画区域）
</summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.UpdateNow">
 <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.
 立即更新指定的重画区域
</summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.EraseNow">
 <summary>
 Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
 The affected windows receive WM_PAINT messages at the ordinary time.
 立即删除指定的重画区域
 </summary>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.Frame">
 <summary>
 如非客户区包含在重画区域中，则对非客户区进行更新。也必须指定RDW_INVALIDATE。
 在窗口重画时使窗口收到一条WM_ERASEBKGND消息。
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.RedrawWindowFlags.NoFrame">
 <summary>
 禁止非客户区域重画（如果它是重画区域的一部分）。也必须指定RDW_VALIDATE
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.HookType">
 <summary>
 枚举传递给SetWindowsHookEx函数的有效的hook类型值
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.LoadLibraryFlags">
 <summary>
 用在 LoadLibraryEx 函数中
 </summary>
 <remarks></remarks>
</member>
<member name="F:eZstd.eZAPI.LoadLibraryFlags.DONT_RESOLVE_DLL_REFERENCES">
 <summary> 不对DLL进行初始化，仅用于NT </summary>
</member>
<member name="F:eZstd.eZAPI.LoadLibraryFlags.LOAD_LIBRARY_AS_DATAFILE">
 <summary> 不准备DLL执行。如装载一个DLL只是为了访问它的资源，就可以改善一部分性能 </summary>
</member>
<member name="F:eZstd.eZAPI.LoadLibraryFlags.LOAD_WITH_ALTERED_SEARCH_PATH">
 <summary> 指定搜索的路径 </summary>
</member>
<member name="T:eZstd.eZAPI.APIHook.HookProc">
 <summary>
 Represents the method called when a hook catches a monitored event.
 </summary>
</member>
<member name="M:eZstd.eZAPI.APIHook.UnhookWindowsHookEx(System.IntPtr)">
 <summary>
 在安装钩子后要记得卸载钩子
 </summary>
 <param name="hhk"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIHook.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
 <summary>
 将hook信息传递到链表中下一个hook处理过程
 </summary>
 <param name="hhk">注：hhk is ignored, so you can use IntPtr.Zero</param>
 <param name="nCode"></param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIHook.CallNextHookEx(System.IntPtr,System.Int32,eZstd.eZAPI.WindowsMessages,eZstd.eZAPI.MSLLHOOKSTRUCT)">
 <summary>
 CallNextHookEx 鼠标 将hook信息传递到链表中下一个hook处理过程。
 overload for use with LowLevelMouseProc
 </summary>
 <param name="hhk"></param>
 <param name="nCode"></param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIHook.CallNextHookEx(System.IntPtr,System.Int32,eZstd.eZAPI.WindowsMessages,eZstd.eZAPI.KBDLLHOOKSTRUCT)">
 <summary>
 CallNextHookEx 键盘 将hook信息传递到链表中下一个hook处理过程。
 overload for use with LowLevelKeyboardProc
 </summary>
 <param name="hhk"></param>
 <param name="nCode"></param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.CallWindowProc(eZstd.eZAPI.APIMessage.WndProcDelegate,System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
 <summary>
 将指定消息信息传送给指定的窗口过程。
 CallWindowProc 是发送某个消息给某个处理函数(包括自定义消息处理函数),
 而DefWindowProc 是发送某个消息给Windows默认的消息处理函数。
 </summary>
 <param name="lpPrevWndFunc">窗口消息处理函数指针(函数名)</param>
 <param name="hWnd">接受窗体句柄.</param>
 <param name="Msg">指定消息类型</param>
 <param name="wParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关.</param>
 <param name="lParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关。</param>
 <returns>返回值指定了消息处理结果，它与发送的消息有关。</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.DefWindowProc(System.IntPtr,eZstd.eZAPI.WindowsMessages,System.IntPtr,System.IntPtr)">
 <summary>
 让Windows的默认消息处理函数处理消息。
 该函数调用默认的窗口过程来为应用程序没有处理的任何窗口消息提供默认的处理。
 该函数确保每一个消息得到处理。调用DefWindowProc函数时使用窗口过程接收的相同参数。
 </summary>
 <param name="hWnd"></param>
 <param name="uMsg">指定消息类型</param>
 <param name="wParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关.</param>
 <param name="lParam">指定其余的、消息特定的信息。该参数的内容与Msg参数值有关。</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.SendMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
 <summary>
 调用一个窗口的窗口函数，将一条消息发给那个窗口。除非消息处理完毕，否则该函数不会返回。
 SendMessageBynum， SendMessageByString是该函数的“类型安全”声明形式
 </summary>
 <param name="hWnd">要接收消息的那个窗口的句柄</param>
 <param name="Msg">指定要发送的消息</param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns>返回值反映了此函数执行的结果.它是由接收消息的窗口的窗口函数返回的值。这个返回值取决于被发送的消息。</returns>
 <remarks>如果接收消息的窗口是同一应用程序的一部分，那么这个窗口的窗口函数就被作为-个子程序马上被调用。
 如果接收消息的窗口是被另外的线程所创建的，那么窗口系统就切换到相应的线程并且调用相应的窗口函数，这条消息不放在目标应用程序队列中。
 </remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.PostMessage(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
 <summary>
 将一条消息投递到指定窗口的消息队列。投递的消息会在Windows事件处理过程中得到处理。在那个时候，会随同投递的消息调用指定窗口的窗口函数。特别适合那些不需要立即处理的窗口消息的发送
 </summary>
 <param name="hWnd">接收消息的那个窗口的句柄。如设为HWND_BROADCAST，表示投递给系统中的所有顶级窗口。如设为零，表示投递一条线程消息（参考<see cref="M:eZstd.eZAPI.APIMessage.PostThreadMessage(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)"/>)</param>
 <param name="Msg">消息标识符</param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.PostThreadMessage(System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
 <summary>
 将一条消息投递给应用程序。这条消息由应用程序的内部GetMessage循环获得，但不会传给一个特定的窗口
 </summary>
 <param name="idThread">用于接收消息的那个线程的标识符</param>
 <param name="msg">消息标识符</param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns>如消息投递成功，则返回TRUE（非零）。会设置GetLastError</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.GetMessage(eZstd.eZAPI.MSG@,System.IntPtr,System.UInt32,System.UInt32)">
 <summary>
 GetMessage不会提取属性其他线程或者程序的窗口的消息。
 The GetMessage function retrieves a message from the calling thread's message queue and places it in the specified structure. This function can retrieve both messages associated with a specified window and thread messages posted via the PostThreadMessage function. 
 The function retrieves messages that lie within a specified range of message values. 
 GetMessage does not retrieve messages for windows that belong to other threads or applications.
 </summary>
 <param name="lpMsg">Points to an MSG structure that receives message information from the thread's message queue.</param>
 <param name="hWnd">Identifies the window whose messages are to be retrieved. The value NULL means that GetMessage retrieves messages for any window that belongs to the calling thread and thread messages posted to the calling thread via PostThreadMessage.</param>
 <param name="wMsgFilterMin">Specifies the integer value of the lowest message value to be retrieved.If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).</param>
 <param name="wMsgFilterMax">Specifies the integer value of the highest message value to be retrieved.If wMsgFilterMin and wMsgFilterMax are both zero, GetMessage returns all available messages (that is, no range filtering is performed).</param>
 <returns>If the function retrieves a message other than WM_QUIT, the return value is nonzero.
 If the function retrieves the WM_QUIT message, the return value is zero.
 If there is an error, the return value is -1. For example, the function fails if hWnd is an invalid window handle.
 </returns>
 <remarks>
 参考：http://www.pinvoke.net/default.aspx/user32/GetMessage.html
 An application typically uses the return value to determine whether to end the main message loop and exit the program.
 The GetMessage function only retrieves messages associated with the window identified by the hWnd parameter or any of its children as specified by the IsChild function, 
 and within the range of message values given by the wMsgFilterMin and wMsgFilterMax parameters. 
 GetMessage does not retrieve messages for windows that belong to other threads nor for threads other than the calling thread. 
 Thread messages, posted by the PostThreadmessage function, have a message hWnd value of NULL. 
 </remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.PeekMessage(eZstd.eZAPI.NativeMessage@,System.IntPtr,System.UInt32,System.UInt32,eZstd.eZAPI.PeekMessageParams)">
 <summary>
 该函数查看应用程序的消息队列，如果其中有消息就将其放入lpMsg所指的结构中，
 与GetMessage函数不同，PeekMessage函数不会等到有消息放入队列时才返回。
 </summary>
 <param name="message">
 指向NativeMessage结构的指针，用来接收函数从Windows应用程序队列中取来的消息。
 Do not use System.Windows.Forms.Message for the first argument - this is a different data structure.</param>
 <param name="hWnd">指定其消息等检验的窗口</param>
 <param name="wMsgFilterMin">指定待检消息号的最小值</param>
 <param name="wMsgFilterMax">指定待检消息号的最大值</param>
 <param name="wRemoveMsg">其值为下面二者之一：PM_MOREMOVE / PM_REMOVE</param>
 <returns></returns>
 <remarks>PeekMessage函数只检索与由hWnd指定的窗口或由IsChild函数指定的子窗口相关的, 范围在
 wMsgFiltcrMin和wMsgFiherMax之间的消息。如果hWnd为NULL,那么PeckMessage检索属于当前
 调用线程的所有窗口的消息（不检索属于其他线程的窗口消息如果hWnd为-1,那么函数只返回把
 hWnd 参数置为 NULL 的 PostAppMessage 函数送去的消息。如果 wMsgFilterMin 和 wMsgFilterMax 都
 是零.那么PeekMessagc返回所有可用消息，不再对消息进行范围上的过滤。
 用WM_KEYFIRST和WMJCEYLAST作为过滤范围可以检索到所有键盘消息。用
 WM_MOUSEFIRST和WM_MOUSSLAST可检索到所有鼠标消息.
 返回值表明是否找到了消息。如果有消息可用则返回TRUE,否则返冋FALSE。
 PeekMessage消息不会从队列中删除WM_ PA丨NT消息.该消息在被处理之前一直留在队列中。
 但是如果WM—PAINT消息中更新区域为NULL,则函数将删除该消息。</remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.TranslateMessage(eZstd.eZAPI.MSG@)">
 <summary>
 将虚拟键消息转换成字符信息。函数TranslateMessage并不修改由参数IpMsg指定的消息，它仅仅为由键盘驱动器产生出ASCII字符的键产生WM_CHAR消息。
 该函数按照下列方式将虚拟键消息转换成字符信息：
 1、WM KEYDOWN 与 WMJCEYUP 组合产生一个 WM—CHAR 或 WM_DEADCHAR 消息；
 2、WM_SYSKEYDOWN 与 WM—SYSKEYUP 组合产生一个 WM_SYSCHAR 或 WM_SYSDEADCHAR消息。
 字符消息被发送给应用程序消息队列.为了获取该消息.应用程序可调用GetMessage或PeekMessage.
 </summary>
 <param name="lpMsg">指向一个由函数GetMessage或PeekMessage恢复的MSG类型的数据结构.
 该结构包含有Windows应用程序队列中的消息.</param>
 <returns></returns>
 <remarks>返回值表明了函数执行结果。若消息被转换（即是指字符消息被发送到应用程序队列）则返回True；否则返回False。
 函数TranslateMessage并不修改由参数IpMsg指定的消息，它仅仅为由键盘驱动器产生出ASCII字符的键产生WM_CHAR消息。若应用程序为其他目的而处理虚拟控消息时，不应调用函数TranslateMessage.
 例如，当TranslateMessage函数返回非零值时，用户不应该再调用TranslateMessage函数。</remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.DispatchMessage(eZstd.eZAPI.MSG@)">
 <summary>
 该函数将lpmsg参数指定的MSG数据结构中的消息传送给指定窗口的窗口函数。
 </summary>
 <param name="lpmsg">指向一个MSG数据结构.其中包含来自Windows应用程序队列的消息信息.
 此数据结构必须包含有效的消息值.如果lpmsg指向一条WM_TIMER消息,而WM_TIMER消息的lParam参数又非NULL,
 则lParam参数是一个函数的地址，该函数被用来代替窗口函数而被调用。</param>
 <returns></returns>
 <remarks>返回值给出窗口函数返回的值.它的意义取决于被发送的消息，但返回值通常被忽略。</remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.keybd_event(System.Byte,System.Byte,System.UInt32,System.UIntPtr)">
 <summary>
 向任意进程发送键盘消息
 </summary>
 <param name="bVk">按键的虚拟键值，如回车键为vk_return, tab键为vk_tab,可以参考常用模拟键的键值对照表，也可以通过System.Windows.Forms.Keys枚举来查看。</param>
 <param name="bScan">扫描码，一般不用设置，用0代替就行；</param>
 <param name="dwFlags">选项标志，如果为keydown则置0即可，如果为keyup则设成数值2，即常数 KEYEVENTF_KEYUP；</param>
 <param name="dwExtraInfo">一般也是置0即可。</param>
 <remarks>
  调用案例1：
 keybd_event(System.Windows.Forms.Keys.Escape, 0, 0, 0)  ' 按下 ESCAPE键
 keybd_event(System.Windows.Forms.Keys.NumLock, 0, KEYEVENTF_KEYUP, 0)  ' 按键弹起，其中 KEYEVENTF_KEYUP=2 
  调用案例2：    模拟按下 'ALT+F4'键
 keybd_event(18, 0, 0, 0);
 keybd_event(115, 0, 0, 0);
 keybd_event(115, 0, KEYEVENTF_KEYUP, 0); 
 keybd_event(18, 0, KEYEVENTF_KEYUP, 0);
</remarks>
</member>
<member name="M:eZstd.eZAPI.APIMessage.mouse_event(eZstd.eZAPI.APIMessage.MouseOperation,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
 <summary> 发送鼠标消息 </summary>
 <param name="dwFlags"> (位编码)要如何操作鼠标。如果不指定 MOUSEEVENTF_ABSOLUTE，则是相对于当前的鼠标位置。 </param>
 <param name="dx">根据MOUSEEVENTF_ABSOLUTE标志，指定x，y方向的绝对位置或相对位置 </param>
 <param name="dy">根据MOUSEEVENTF_ABSOLUTE标志，指定x，y方向的绝对位置或相对位置 </param>
 <param name="dwData">没有使用，直接赋值为0 </param>
 <param name="dwExtraInfo">没有使用，直接赋值为0 </param>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_Move">
 <Summary> 移动鼠标 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_LeftDown">
 <Summary> 模拟鼠标左键按下 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_LeftUp">
 <Summary> 模拟鼠标左键抬起 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_RightDown">
 <Summary> 模拟鼠标右键按下 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_RightUp">
 <Summary> 模拟鼠标右键抬起 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_MiddleDown">
 <Summary> 模拟鼠标中键按下 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_MiddleUp">
 <Summary> 模拟鼠标中键抬起 </Summary>
</member>
<member name="F:eZstd.eZAPI.APIMessage.MouseOperation.MouseEventF_Absolute">
 <Summary> 标示是否采用绝对坐标 </Summary>
</member>
<member name="T:eZstd.eZAPI.MSG">
 <summary>
 The MSG structure contains message information from a thread's message queue.
 Alternative Managed API: Use the <see cref="T:System.Windows.Forms.Message"/> or System.Windows.Interop.MSG struct.
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.NativeMessage">
 <summary>
 This is a different data structure from <see cref="T:System.Windows.Forms.Message"/>
 </summary>
 <remarks></remarks>
</member>
<member name="T:eZstd.eZAPI.RECT">
 <summary>
 这是windows广泛采用的一种数据结构，通常作为参数传递给许多api函数。
 RECT结构表示一个矩形区域，left和top字段描叙了矩形第一个角（通常是左上角），
 right和bottom字段描叙了矩形的第二个角（通常是右下角）。这两个位置决定了矩形的大小与位置。
 这些字段采用的单位及坐标系统取决于当前的有效缩放比例、准备表示的对象以及准备调用的api函数。
 并不要求bottom字段的绝对值大于top字段，而且也可以为负数。
 </summary>
 <remarks>由right及bottom字段指定的点通常不是矩形的一部分；矩形对象描叙的是个空矩形（其中不包含像素）；
 RECT结构要求按引用传递给windows函数，不要试图使用ByVal </remarks>
</member>
<member name="M:eZstd.eZAPI.UnClassified.CallWindowProc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 将消息信息传送给指定的窗口过程的函数。
 </summary>
 <param name="lpPrevWndFunc">指向前一个窗口过程的指针。如果该值是通过调用GetWindowLong函数，
 并将该函数中的nlndex参数设为GWL_WNDPROC或DWL_DLGPROC而得到的，那么它实际上要么是窗口或者对话框的地址，要么就是代表该地址的句柄。</param>
 <param name="hWnd">指向接收消息的窗口过程的句柄。</param>
 <param name="Msg">指定消息类型。</param>
 <param name="wParam"></param>
 <param name="lParam"></param>
 <returns></returns>
 <remarks>使用函数CallWindowsProc可进行窗口子分类。通常来说，同一类的所有窗口共享一个窗口过程。子类是一个窗口或者相同类的一套窗口，在其消息被传送到该类的窗口过程之前，这些消息是由另一个窗口过程进行解释和处理的。
SetWindowLong函数通过改变与特定窗口相关的窗口过程，使系统调用新的窗口过程来创建子类，
 新的窗口过程替换了以前的窗口过程。应用程序必须通过调用CallWindowsProc来将新窗口过程没有处理的任何消息传送到以前的窗口过程中，
 这样就允许应用程序创建一系列窗口过程。  It is possible to execute an array of bytes. lpPrevWndFunc is equal to the address of the byte array.</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.FindWindow(System.String,System.String)">
 <summary>
 搜索指定类型或标题名的窗口句柄
 </summary>
 <param name="lpClassName">指向包含了窗口类名的空中止（C语言）字串的指针；或设为vbNullString，表示接收任何类</param>
 <param name="lpWindowName">指向包含了窗口文本（或标签）的空中止（C语言）字串的指针；或设为vbNullString，表示接收任何窗口标题</param>
 <returns>找到窗口的句柄。如未找到相符窗口，则返回零。会设置GetLastError</returns>
 <remarks>寻找窗口列表中第一个符合指定条件的顶级窗口
 （在vb里使用：FindWindow最常见的一个用途是获得ThunderRTMain类的隐藏窗口的句柄；该类是所有运行中vb执行程序的一部分。
 获得句柄后，可用api函数GetWindowText取得这个窗口的名称；该名也是应用程序的标题）。
 很少要求同时按类与窗口名搜索。为向自己不准备参数传递一个零，最简便的办法是传递vbNullString常数</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
 <summary>
 在窗口列表中寻找与指定条件相符的第一个子窗口
 </summary>
 <param name="parentHandle">在其中查找子的父窗口。如设为零，表示使用桌面窗口
 （通常说的顶级窗口都被认为是桌面的子窗口，所以也会对它们进行查找）</param>
 <param name="childAfter">从这个窗口后开始查找。这样便可利用对FindWindowEx的多次调用找到符合条件的所有子窗口。
 如设为零，表示从第一个子窗口开始搜索</param>
 <param name="lclassName">欲搜索的类名。或设为vbNullString，表示忽略。</param>
 <param name="windowTitle">欲搜索的窗口名。或设为vbNullString，表示忽略。</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.GetForegroundWindow">
 <summary>获得前台窗口的句柄。这里的“前台窗口”是指前台应用程序的活动窗口。
 系统将生成前台窗口的线程给予较高的优先级。
 The GetForegroundWindow function returns a handle to the foreground window.</summary>
 <returns>The return value is a handle to the foreground window. 
 The foreground window can be NULL in certain circumstances, such as when a window is losing activation. 
 如果函数调用失败，则返回零值。 </returns>
 <remarks>windows nt支持多个桌面，它们相互间是独立的。每个桌面都有自己的前台窗口</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,eZstd.eZAPI.SetWindowPosFlags)">
 <summary>
 设置或获取窗口的位置与相对位置
 </summary>
 <param name="hwnd">欲定位的窗口</param>
 <param name="hWndInsertAfter">窗口句柄。在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。也可以选用枚举SWP_HWND中的值。 </param>
 <param name="x">窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示</param>
 <param name="y">窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示</param>
 <param name="cx">指定新的窗口宽度</param>
 <param name="cy">指定新的窗口高度</param>
 <param name="uFlags">SetWindowPosFlags枚举 </param>
 <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
 <remarks>窗口成为最顶级窗口后，它下属的所有窗口也会进入最顶级。
 一旦将其设为非最顶级，则它的所有下属和物主窗口也会转为非最顶级。
 Z序列用垂直于屏幕的一根假想Z轴量化这种从顶部到底部排列的窗口顺序</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.SetForegroundWindow(System.IntPtr)">
 <summary>
 设置窗口为前台窗口，这个函数可用于改变用户目前正在操作的应用程序。但是它是可以通过鼠标点击其他窗口而被覆盖的。
 </summary>
 <param name="hwnd"></param>
 <returns></returns>
 <remarks>不应随便使用它，因为一旦程序突然从后台进入前台，可能会使用户产生迷惑</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.BringWindowToTop(System.IntPtr)">
 <summary>
 将指定的窗口带至窗口列表顶部。倘若它部分或全部隐藏于其他窗口下面，则将隐藏的部分完全显示出来。
 将窗口显示在窗口顶部后，还可以通过鼠标点击其他窗口而将此窗口覆盖。
 该函数也对弹出式窗口、顶级窗口以及MDI子窗口产生作用
 </summary>
 <param name="hwnd">欲带至顶部的那个窗口的句柄</param>
 <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
 <remarks>这个函数也许能随同子窗口使用。函数对一个特定的输入线程来说是“本地的”——换言之，倘若某窗口并非前台应用程序的一部分，
 那么一旦随同该窗口调用本函数，仍会将窗口带至它自己那个应用程序的窗口列表顶部。
 但是，不会同时使那个应用成为前台应用程序。这意味着在调用了本函数后，窗口仍会保持隐藏状态</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.GetWindowRect(System.IntPtr,eZstd.eZAPI.RECT@)">
 <summary>
 获得整个窗口的范围矩形。此矩形在屏幕坐标系中，屏幕左上角点为原点(0,0)。
 窗口的边框、标题栏、滚动条及菜单等都在这个矩形内
 </summary>
 <param name="hwnd">想获得范围矩形的那个窗口的句柄，窗口的边框、标题栏、滚动条及菜单等都在这个矩形内</param>
 <param name="lpRect">屏幕坐标中随同窗口装载的矩形</param>
 <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.GetClientRect(System.IntPtr,eZstd.eZAPI.RECT@)">
 <summary>
 返回指定窗口客户区矩形的大小。此矩形在窗口客户坐标系中，客户区的左上角为原点(0,0)。
 </summary>
 <param name="hwnd">欲计算大小的目标窗口</param>
 <param name="lpRect">指定一个矩形，用客户区域的大小载入（以像素为单位）</param>
 <returns>非零表示成功，零表示失败。会设置GetLastError</returns>
 <remarks>lpRect的左侧及顶部区域肯定会被这个函数设为零</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.SetParent(System.IntPtr,System.IntPtr)">
 <summary>
 为窗体设置父窗体
 </summary>
 <param name="hWndChild"></param>
 <param name="hWndNewParent"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.GetWindow(System.IntPtr,eZstd.eZAPI.GetWndConsts)">
 <summary>
 获得一个窗口的句柄，该窗口与某源窗口有特定的关系
 </summary>
 <param name="hWnd">源窗口</param>
 <param name="uCmd">指定结果窗口与源窗口的关系，它们建立在下述常数基础上：</param>
 <returns>由wCmd决定的一个窗口的句柄。如没有找到相符窗口，或者遇到错误，则返回零值。会设置GetLastError</returns>
 <remarks>兄弟或同级是指在整个分级结构中位于同一级别的窗口。如某个窗口有五个子窗口，那五个窗口就是兄弟窗口。
 尽管GetWindow可用于枚举窗口，但倘若要在枚举过程中重新定位、创建和清除窗口，那么EnumWindows和EnumChildWindows更为可靠</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.IsWindow(System.IntPtr)">
 <summary>
 判断一个窗口句柄是否有效
 </summary>
 <param name="hwnd">待检查窗口的句柄</param>
 <returns>True表示成功，False表示失败</returns>
 <remarks>如在一个程序变量里容纳了窗口句柄，为了解它是否仍然有效，就可考虑使用这个函数</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.EnableWindow(System.IntPtr,System.Boolean)">
 <summary>
 在指定的窗口里允许或禁止所有鼠标及键盘输入（在vb里使用：在vb窗体和控件中使用Enabled属性）。
 当被禁止时，窗口不响应鼠标和按键的输入，允许时，窗口接受所有的输入。
 </summary>
 <param name="hWnd">窗口句柄</param>
 <param name="bEnable">True允许窗口，False禁止</param>
 <returns>True表示成功，False表示失败</returns>
 <remarks>zengfy注：如果将Excel或Visio等的窗口禁用后，再去调用其Application属性，则会报错：应用程序正在使用中。</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.SetActiveWindow(System.IntPtr)">
 <summary>
 激活指定的窗口。
 在vb里使用这个函数要小心，它不会改变输入焦点，所以焦点可能设向一个不活动窗口，
 最好换用SetFocusAPI函数来激活窗口。如指定的窗口不从属于当前输入线程，则没有任何效果
 </summary>
 <param name="hWnd">待激活窗口的句柄</param>
 <returns>前一个活动窗口的句柄</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.UpdateWindow(System.IntPtr)">
 <summary>
 强制立即更新窗口，窗口中以前屏蔽的所有区域都会重画（在vb里使用：如vb窗体或控件的任何部分需要更新，可考虑直接使用refresh方法
 </summary>
 <param name="hWnd">欲更新窗口的句柄</param>
 <returns>True表示成功，False表示失败</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.ShowWindow(System.IntPtr,eZstd.eZAPI.ShowWindowCommands)">
 <summary>
 根据参数nCmdShow显示或改变指定的窗口
 </summary>
 <param name="hWnd">窗口句柄，要向这个窗口应用由nCmdShow指定的命令</param>
 <param name="nCmdShow">为窗口指定可视性方面的一个命令。</param>
 <returns></returns>
 <remarks>如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.RedrawWindow(System.IntPtr,eZstd.eZAPI.RECT@,System.IntPtr,eZstd.eZAPI.RedrawWindowFlags)">
 <summary>
 根据fuRedraw旗标的设置，重画全部或部分窗口
 </summary>
 <param name="hwnd">要重画的窗口的句柄。零表示更新整个桌面窗口</param>
 <param name="lprcUpdate">窗口中需要重画的一个矩形区域，如果hrgnUpdate指定的是一个合法的区域句柄，则此参数被忽略。</param>
 <param name="hrgnUpdate">一个“区”的句柄，这个区描述了要重画的窗口区域。“区”：Region。
 如果<paramref name="lprcUpdate"/>和<paramref name="hrgnUpdate"/>都是Null，则整个用户区域被加入到更新区域中。</param>
 <param name="flags">规定具体重画操作的旗标。这些值可组合使用，从而进行复杂的重画行动</param>
 <returns>True表示成功，False表示失败</returns>
 <remarks>如针对桌面窗口应用这个函数，则应用程序必须用RDW_ERASE旗标重画桌面</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.IsWindowEnabled(System.IntPtr)">
 <summary>
 判断窗口是否处于活动状态（在vb里使用：针对vb窗体和控件，请用enabled属性）
 </summary>
 <param name="hWnd">待检查窗口的句柄</param>
 <returns>True表示成功，False表示失败</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.GetWindowThreadProcessId(System.Int32,System.Int32@)">
 <summary>
 获取与指定窗口关联在一起的一个进程和线程标识符
 </summary>
 <param name="handle">指定窗口句柄</param>
 <param name="processId">指定一个变量，用于装载拥有那个窗口的一个进程的标识符</param>
 <returns></returns>
 <remarks>拥有窗口的线程的标识符</remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.GetWindowLong(System.IntPtr,eZstd.eZAPI.WindowLongFlags)">
 <summary>
 从指定窗口的结构中取得信息
 </summary>
 <param name="hwnd">欲为其获取信息的窗口的句柄</param>
 <param name="nIndex">欲取回的信息</param>
 <returns>由nIndex决定。零表示出错。会设置GetLastError</returns>
 <remarks></remarks>
</member>
<member name="M:eZstd.eZAPI.APIWindows.SetWindowLong(System.IntPtr,eZstd.eZAPI.WindowLongFlags,System.IntPtr)">
 <summary>
 Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
 </summary>
 <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs..</param>
 <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer. 
 To set any other value, specify one of the following values: GWL_EXSTYLE, GWL_HINSTANCE, GWL_ID, GWL_STYLE, GWL_USERDATA, GWL_WNDPROC </param>
 <param name="dwNewLong">The replacement value.</param>
 <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.
 If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
</member>
<member name="T:eZstd.eZAPI.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:eZstd.eZAPI.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:eZstd.eZAPI.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
</members>
</doc>
